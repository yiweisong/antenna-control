using System;using System.Linq;namespace AntennaControl{    class GPIO    {        private AppSettings _settings;        private static OpenLibSys.Ols MyOls;        public GPIO(AppSettings settings)        {            this._settings = settings;        }        public bool Initialize()        {            MyOls = new OpenLibSys.Ols();            return MyOls.GetStatus() == (uint)OpenLibSys.Ols.Status.NO_ERROR;        }        public byte Read(string ioType, string key)        {            if (ioType == "gpo")            {                GPIOOptions options = this._settings.GPO.Where(s => s.key == key).FirstOrDefault();                return this.ReadGpioVal(this._settings.baseAddress, options);            }            if (ioType == "gpi")            {                GPIOOptions options = this._settings.GPI.Where(s => s.key == key).FirstOrDefault();                return this.ReadGpioVal(this._settings.baseAddress, options);            }            throw new Exception("Undefined ioType:" + ioType);        }        public bool Write(string ioType, string key, byte b)        {            if (ioType == "gpo")            {                GPIOOptions options = this._settings.GPO.Where(s => s.key == key).FirstOrDefault();                return this.SetGpioVal(this._settings.baseAddress, b, options);            }            if (ioType == "gpi")            {                GPIOOptions options = this._settings.GPI.Where(s => s.key == key).FirstOrDefault();                return this.SetGpioVal(this._settings.baseAddress, b, options);            }            throw new Exception("Undefined ioType:" + ioType);        }        private byte ReadGpioVal(ushort baseAddress, GPIOOptions options)        {            byte b = 0;            try            {                baseAddress += Convert.ToUInt16(options.offset, 16);                b = MyOls.ReadIoPortByte(baseAddress);                b = Convert.ToByte((b << (7 - options.location) & 0xff) >> 7);            }            catch (Exception ex)            {                // System.Windows.MessageBox.Show("An error occured:\n" + ex.Message);                Console.Error.WriteLine("An error occured:\n" + ex.Message);            }            return b;        }        private bool SetGpioVal(ushort baseAddress, byte b, GPIOOptions options)        {            try            {                baseAddress += Convert.ToUInt16(options.offset, 16);                byte currentValue = MyOls.ReadIoPortByte(baseAddress);                b = Convert.ToByte((currentValue                    & (~(1 << options.location)))                    | (b << options.location));                MyOls.WriteIoPortByte(baseAddress, b);                return true;            }            catch (Exception ex)            {                //System.Windows.MessageBox.Show("An error occured:\n" + ex.Message);                Console.Error.WriteLine("An error occured:\n" + ex.Message);                return false;            }        }    }}